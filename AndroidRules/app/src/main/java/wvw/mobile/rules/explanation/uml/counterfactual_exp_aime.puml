@startuml
actor User
participant "ExplanationRunner" as ER
participant "Explainer" as E
participant "ModelFactory" as MF

User -> ER: run()

group Counterfactual Explanation Test
    
    activate ER

    ER -> ER: runExplanationTest(\n"aime", "counterfactual")

    activate ER

    ER -> ER: runCounterfactualExplanationTestAIME()

    activate ER

    ER -> E: Create explainer
    activate E
    E --> ER

    ER -> E: Load model into explainer
    
    E -> MF: getAIMEBaseModel()
    activate MF
    E <-- MF: return AIMEBaseModel
    deactivate MF
    
    E --> ER
    ER -> E: Load rules into Explainer
    
    E -> MF: getAIMERules()
    activate MF
    note right
      Need to add loading rules 
      from rules/text file
    end note
    E <-- MF: return AIMERules
    deactivate MF
    
    E --> ER
    
    E -> E: generateInfModel(baseModel)
    note right
      Utilizes built-in Jena functions
      to create inf model
    end note
    activate E
    
    E -> E: Creates generic rule reasoner with explainer rules

    E -> E: Create inference model with generic \nrule reasoner and baseModel
    
    E --> E: Return inference model
    deactivate E
        
    ER -> ER: List all statements from infModel that \nhave subj, prop, obj (including wildcards)
    
    ER -> E: Retrieve other baseModel
    
    E -> MF: getAIMEBaseModelBanana()
    activate MF
    E <-- MF: return AIMEBaseModelBanana
    deactivate MF
    
    E --> ER
    
    loop For each statement (subj, prop, obj)
        ER -> E: Develop counterfactual explanation \nwith explainer and other baseModel
        E -> E: GetFullCounterfactualExplanation_B(\nstatement, otherBaseModel)
      activate E
        E -> E: generateInfModel(baseModel)
        note right
          Utilizes built-in Jena functions
          to create inf model
        end note
        activate E
        
        E -> E: Creates generic rule reasoner with explainer rules
    
        E -> E: Create inference model with generic \nrule reasoner and baseModel
        
        E --> E: Return inference model
        deactivate E
        
        E -> E: generateInfModel(otherBaseModel)
        note right
          Utilizes built-in Jena functions
          to create inf model
        end note
        activate E
        
        E -> E: Creates generic rule reasoner with explainer rules
    
        E -> E: Create inference model with generic \nrule reasoner and otherBaseModel
        
        E --> E: Return inference model
        deactivate E
        
        
        
        
      deactivate E
    end loop
        

    ER --> User: print traceResponse
    deactivate ER

end group
@enduml